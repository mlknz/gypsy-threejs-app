!function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=n(2),a=o(r),s=n(21),c=o(s),l=n(24),d=function e(){function t(){var e=Math.floor(o.clientWidth*s),t=Math.floor(o.clientHeight*s);o.width===e&&o.height===t||(o.width=e,o.height=t,r.setSize(o.clientWidth,o.clientHeight,!1),d.resize(e,t))}function n(){t(),d.update(u.getDelta()),f.update(),requestAnimationFrame(n)}if(i(this,e),!l())return void(document.body.innerHTML="Unable to initialize WebGL. Your browser may not support it.");var o=document.getElementById("canvas"),r=new THREE.WebGLRenderer({antialias:!0,alpha:!1,canvas:o}),s=window.devicePixelRatio||1;r.setPixelRatio(s);var d=new a.default(r);this.appViewer=d;var f=new c.default(r),u=new THREE.Clock;n()};window.app=new d},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(3),s=o(a),c=n(4),l=o(c),d=n(14),f=o(d),u=n(16),h=o(u),m=function(){function e(t){i(this,e),this.renderer=t,this.renderer.setClearColor(s.default.renderer.clearColor,s.default.renderer.clearAlpha),this.renderer.setPixelRatio(s.default.renderer.devicePixelRatio);var n=this.renderer.getContext(),o=n.canvas.clientWidth/n.canvas.clientHeight;this.sceneManager=new l.default,this.camera=new THREE.PerspectiveCamera(60,o,s.default.camera.near,s.default.camera.far),this.sceneReady=!1,document.addEventListener("sceneReady",this.onSceneReady.bind(this))}return r(e,[{key:"onSceneReady",value:function(){this.sceneReady=!0,this.controls=new h.default(this.camera,this.renderer.domElement,this.sceneManager.scene),this.controls.resetCameraOrbit(),this.appLogicManager=new f.default(this.sceneManager.scene);var e=this.sceneManager.scene.getObjectByName("navmesh");this.controls.addNavMeshes([e]),this.controls.addNavMeshes(this.appLogicManager.navMeshes)}},{key:"update",value:function(e){this.sceneReady&&(s.default.time+=e,this.controls.update(e),this.appLogicManager.update(e,s.default.time),this.renderer.render(this.sceneManager.scene,this.camera))}},{key:"resize",value:function(e,t){var n=e/t;this.camera.aspect!==n&&(this.camera.aspect=n,this.camera.updateProjectionMatrix())}},{key:"dispose",value:function(){this.controls.dispose()}}]),e}();t.default=m},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={isDebug:"debug"===window.location.hash.substr(1),isIOS:/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,useDDSTextures:!0,usePVRTextures:!0,time:0,renderer:{clearColor:1315876,clearAlpha:!0,devicePixelRatio:window.devicePixelRatio||1},camera:{cameraPos:[60,30,50],near:1,far:1400,walkerNear:.1,walkerFar:240},controls:{minDistance:1,maxDistance:1e3,rotateSpeed:.25},appLogic:{doors:{openingTime:3}}};t.default=n},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(5),c=o(s),l=n(8),d=o(l),f=n(9),u=o(f),h=n(10),m=o(h),p=new Event("sceneReady"),v=function(){function e(){r(this,e),this.scene=new THREE.Scene,this.assetsLoader=new c.default(this.scene),this.materialDecorator=new m.default(u.default),document.addEventListener("assetsLoaded",this.onAssetsLoaded.bind(this)),this.assetsLoader.loadAssets(d.default.assets)}return a(e,[{key:"onAssetsLoaded",value:function(){this.createSceneFromDescription(this.scene),this.materialDecorator.rewriteSingleMaterials(this.scene,this.assetsLoader.assets.textures),this.hideNavigationMeshes(),document.dispatchEvent(p)}},{key:"hideNavigationMeshes",value:function(){this.scene.traverse(function(e){e.material&&(e.name.includes("navmesh")||e.name.includes("door_nav_blocker"))&&(e.material.visible=!1)})}},{key:"createSceneFromDescription",value:function(e){this.addChildrenFromDescription(e,d.default.model.children)}},{key:"addChildrenFromDescription",value:function(e,t){var n=this,o=void 0;t.forEach(function(t){o=n.createObjectFromDescription(t),e.add(o),t.children&&t.children.length>0&&n.addChildrenFromDescription(o,t.children)})}},{key:"createObjectFromDescription",value:function(e){var t=null,n=null,o="Object3D";e.object&&e.object.type?o=e.object.type:e.type&&(o=e.type),e.object&&e.object.args?n=e.object.args:e.args&&(n=e.args);for(var r in n)n.hasOwnProperty(r)&&n[r].type&&"asset/texture"===n[r].type&&(n[r]=this.assetsLoader.assets.textures[n[r].name]);if("asset/json"===o)t=this.assetsLoader.assets.objects[e.name];else if("Mesh"===o||e.object&&e.object.geometry){var a=this.createObjectFromDescription(e.object.geometry),s=null;e.object.material&&(s=this.createObjectFromDescription(e.object.material)),t=new THREE.Mesh(a,s)}else t=n instanceof Array?new(Function.prototype.bind.apply(THREE[o],[null].concat(i(n)))):new THREE[o](n);return t||(t=new THREE.Object3D),e.properties&&this.addObjectProperties(t,e.properties),t}},{key:"addObjectProperties",value:function(e,t){var n=void 0,o=void 0;for(n in t)if(t.hasOwnProperty(n))if(t[n]instanceof Object){e[n]||(e[n]={});for(o in t[n])t[n].hasOwnProperty(o)&&(e[n][o]=t[n][o])}else e[n]=t[n]}}]),e}();t.default=v},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(3),s=o(a),c=new Event("assetsLoaded");window.THREE=window.THREE||THREE,n(6),n(7);var l=function(){function e(t){i(this,e),this.scene=t,this.assets={objects:{},textures:{}},this.objectLoader=new THREE.ObjectLoader,this.textureLoader=new THREE.TextureLoader,this.useDDS=!s.default.isIOS&&s.default.useDDSTextures,this.usePVR=s.default.isIOS&&s.default.usePVRTextures,this.DDSLoader=new THREE.DDSLoader,this.PVRLoader=new THREE.PVRLoader}return r(e,[{key:"loadAssets",value:function(e){var t=this,n=[],o=void 0,i=void 0,r=void 0,a=void 0,s=void 0;e.forEach(function(e){switch(e.type){case"json":i=e.path,a=t.objectLoader,s=t.assets.objects,r=e.name;break;case"texture":if(i=e.path,a=t.textureLoader,s=t.assets.textures,r=e.name,e.path instanceof Array)for(var c=0;c<e.path.length;c++){if(i=e.path[c],t.useDDS&&e.path[c].includes(".dds")){a=t.DDSLoader;break}if(t.usePVR&&e.path[c].includes(".pvr")){a=t.PVRLoader;break}}break;default:throw new Error("unknow asset type in sceneDescription: "+e.type)}o=t.loadEntry(i,s,r,a),n.push(o)}),Promise.all(n).then(function(){document.dispatchEvent(c)})}},{key:"loadEntry",value:function(e,t,n,o){return new Promise(function(i,r){o.load(e,function(e){t[n]=e,i()},function(e){console.log(e.loaded/e.total*100+"% loaded")},function(e){console.log("error while loading model",e),r(e)})})}}]),e}();t.default=l},function(e,t){THREE.DDSLoader=function(){this._parser=THREE.DDSLoader.parse},THREE.DDSLoader.prototype=Object.create(THREE.CompressedTextureLoader.prototype),THREE.DDSLoader.prototype.constructor=THREE.DDSLoader,THREE.DDSLoader.parse=function(e,t){function n(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}function o(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}function i(e,t,n,o){for(var i=n*o*4,r=new Uint8Array(e,t,i),a=new Uint8Array(i),s=0,c=0,l=0;l<o;l++)for(var d=0;d<n;d++){var f=r[c];c++;var u=r[c];c++;var h=r[c];c++;var m=r[c];c++,a[s]=h,s++,a[s]=u,s++,a[s]=f,s++,a[s]=m,s++}return a}var r={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},a=542327876,s=131072,c=512,l=1024,d=2048,f=4096,u=8192,h=16384,m=32768,p=4,v=n("DXT1"),g=n("DXT3"),E=n("DXT5"),b=n("ETC1"),x=31,M=0,y=1,_=2,T=3,L=4,w=7,S=20,P=21,R=22,D=23,C=24,k=25,N=26,O=28,I=new Int32Array(e,0,x);if(I[M]!==a)return console.error("THREE.DDSLoader.parse: Invalid magic number in DDS header."),r;if(!I[S]&p)return console.error("THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code."),r;var A,U=I[P],H=!1;switch(U){case v:A=8,r.format=THREE.RGB_S3TC_DXT1_Format;break;case g:A=16,r.format=THREE.RGBA_S3TC_DXT3_Format;break;case E:A=16,r.format=THREE.RGBA_S3TC_DXT5_Format;break;case b:A=8,r.format=THREE.RGB_ETC1_Format;break;default:if(!(32===I[R]&&16711680&I[D]&&65280&I[C]&&255&I[k]&&4278190080&I[N]))return console.error("THREE.DDSLoader.parse: Unsupported FourCC code ",o(U)),r;H=!0,A=64,r.format=THREE.RGBAFormat}r.mipmapCount=1,I[_]&s&&t!==!1&&(r.mipmapCount=Math.max(1,I[w]));var V=I[O];if(r.isCubemap=!!(V&c),r.isCubemap&&(!(V&l)||!(V&d)||!(V&f)||!(V&u)||!(V&h)||!(V&m)))return console.error("THREE.DDSLoader.parse: Incomplete cubemap faces"),r;r.width=I[L],r.height=I[T];for(var z=I[y]+4,G=r.isCubemap?6:1,F=0;F<G;F++)for(var j=r.width,B=r.height,X=0;X<r.mipmapCount;X++){if(H)var Y=i(e,z,j,B),W=Y.length;else var W=Math.max(4,j)/4*Math.max(4,B)/4*A,Y=new Uint8Array(e,z,W);var Z={data:Y,width:j,height:B};r.mipmaps.push(Z),z+=W,j=Math.max(j>>1,1),B=Math.max(B>>1,1)}return r}},function(e,t){THREE.PVRLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this._parser=THREE.PVRLoader.parse},THREE.PVRLoader.prototype=Object.create(THREE.CompressedTextureLoader.prototype),THREE.PVRLoader.prototype.constructor=THREE.PVRLoader,THREE.PVRLoader.parse=function(e,t){var n=13,o=new Uint32Array(e,0,n),i={buffer:e,header:o,loadMipmaps:t};if(55727696===o[0])return THREE.PVRLoader._parseV3(i);if(559044176===o[11])return THREE.PVRLoader._parseV2(i);throw new Error("[THREE.PVRLoader] Unknown PVR format")},THREE.PVRLoader._parseV3=function(e){var t,n,o=e.header,i=o[12],r=o[2],a=o[6],s=o[7],c=(o[9],o[10]),l=o[11];switch(r){case 0:t=2,n=THREE.RGB_PVRTC_2BPPV1_Format;break;case 1:t=2,n=THREE.RGBA_PVRTC_2BPPV1_Format;break;case 2:t=4,n=THREE.RGB_PVRTC_4BPPV1_Format;break;case 3:t=4,n=THREE.RGBA_PVRTC_4BPPV1_Format;break;default:throw new Error("pvrtc - unsupported PVR format "+r)}return e.dataPtr=52+i,e.bpp=t,e.format=n,e.width=s,e.height=a,e.numSurfaces=c,e.numMipmaps=l,e.isCubemap=6===c,THREE.PVRLoader._extract(e)},THREE.PVRLoader._parseV2=function(e){var t,n,o=e.header,i=o[0],r=o[1],a=o[2],s=o[3],c=o[4],t=(o[5],o[6]),l=(o[7],o[8],o[9],o[10]),d=(o[11],o[12]),f=255,u=24,h=25,m=c&f,p=l>0;if(m===h)n=p?THREE.RGBA_PVRTC_4BPPV1_Format:THREE.RGB_PVRTC_4BPPV1_Format,t=4;else{if(m!==u)throw new Error("pvrtc - unknown format "+m);n=p?THREE.RGBA_PVRTC_2BPPV1_Format:THREE.RGB_PVRTC_2BPPV1_Format,t=2}return e.dataPtr=i,e.bpp=t,e.format=n,e.width=a,e.height=r,e.numSurfaces=d,e.numMipmaps=s+1,e.isCubemap=6===d,THREE.PVRLoader._extract(e)},THREE.PVRLoader._extract=function(e){var t={mipmaps:[],width:e.width,height:e.height,format:e.format,mipmapCount:e.numMipmaps,isCubemap:e.isCubemap},n=e.buffer,o=e.dataPtr,i=e.bpp,r=e.numSurfaces,a=0,s=0,c=0,l=0,d=0,f=0;2===i?(c=8,l=4):(c=4,l=4),s=c*l*i/8,t.mipmaps.length=e.numMipmaps*r;for(var u=0;u<e.numMipmaps;){var h=e.width>>u,m=e.height>>u;d=h/c,f=m/l,d<2&&(d=2),f<2&&(f=2),a=d*f*s;for(var p=0;p<r;p++){var v=new Uint8Array(n,o,a),g={data:v,width:h,height:m};t.mipmaps[p*e.numMipmaps+u]=g,o+=a}u++}return t}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={assets:[{name:"spaceship_interior",type:"json",path:"assets/spaceship_interior.json"},{name:"door_diffuse",type:"texture",path:"assets/textures/door_diffuse.jpg"},{name:"floor_tile_diffuse",type:"texture",path:"assets/textures/floor_tile_diffuse.jpg"},{name:"floor_tile_normal",type:"texture",path:"assets/textures/floor_tile_normal.jpg"},{name:"wall_tile_diffuse",type:"texture",path:"assets/textures/wall_tile_diffuse.jpg"},{name:"wall_tile_normal",type:"texture",path:"assets/textures/wall_tile_normal.jpg"}],model:{children:[{type:"asset/json",name:"spaceship_interior",properties:{name:"Spaceship Interior"}},{object:{type:"AmbientLight",args:11184810},properties:{name:"ambientLight"}},{object:{type:"DirectionalLight",args:16777215},properties:{name:"directLight",position:{x:-30,y:20,z:10}}},{object:{type:"DirectionalLight",args:8947848},properties:{name:"directLight2",position:{x:30,y:-30,z:-5}}}]}};t.default=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={floor:{map:"floor_tile_diffuse",normalMap:"floor_tile_normal",color:16777215,metalness:.3,roughness:.8,repeat:[30,30]},wall:{map:"wall_tile_diffuse",normalMap:"wall_tile_normal",color:16777215,metalness:.2,roughness:.8,repeat:[12.8,12.8]},roof:{map:"floor_tile_diffuse",normalMap:"floor_tile_normal",color:16777215,metalness:.3,roughness:.8,repeat:[30,30]},door:{map:"door_diffuse",color:16777215,metalness:.2,roughness:.8}};t.default=n},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(11),a=n(12),s=n(13),c=function(){function e(t){o(this,e),this.materialsDescription=t||{},this.materialsCache=[]}return i(e,[{key:"rewriteSingleMaterials",value:function(e,t){var n=this;this.textures=t,e.traverse(function(e){if(e instanceof THREE.Mesh&&!e.name.includes("_instanced"))if(e.material instanceof THREE.MultiMaterial)for(var t=0;t<e.material.materials.length;t++)e.material.materials[t]=n.rewriteSingleMaterial(e.material.materials[t],r,a);else e.material=n.rewriteSingleMaterial(e.material,r,a)})}},{key:"rewriteInstancedMaterial",value:function(e){var t=null;if(e instanceof THREE.MultiMaterial){for(var n=0;n<e.materials.length;n++)e.materials[n]=this.rewriteSingleMaterial(e.materials[n],s,a,!0);t=e}else t=this.rewriteSingleMaterial(e,s,a,!0);return t}},{key:"rewriteCustomMaterial",value:function(e,t,n){var o=null;if(e instanceof THREE.MultiMaterial){for(var i=0;i<e.materials.length;i++)e.materials[i]=this.rewriteSingleMaterial(e.materials[i],t,n,!0);o=e}else o=this.rewriteSingleMaterial(e,t,n,!0);return o}},{key:"rewriteSingleMaterial",value:function(e,t,n,o,i){for(var r=e.name+(o&&!e.name.includes("_instanced")?"_instanced":""),a=0;a<this.materialsCache.length;a++)if(!i&&r===this.materialsCache[a].name)return this.materialsCache[a];var s=THREE.UniformsUtils.clone(THREE.ShaderLib.standard.uniforms);s.map.value=e.map,s.lightMap.value=e.lightMap,s.bumpMap.value=e.bumpMap instanceof THREE.Texture?e.bumpMap:null,s.normalMap.value=e.normalMap instanceof THREE.Texture?e.normalMap:null,s.diffuse.value=e.color?e.color:new THREE.Color(11184810),s.roughnessMap.value=null,s.roughness.value=e.roughness||.6,s.metalness.value=e.metalness||.1,s.ssaoMap={type:"t",value:null},s.ssaoMapIntensity={type:"f",value:1.01},s.screenResolution={type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)};var c=this.materialsDescription[r];c&&this._writeUniformsFromMaterialDescription(s,c);var l=this._getMaterialDefines(s),d=l+t,f=l+n,u=new THREE.RawShaderMaterial({uniforms:s,lights:!0,transparent:e.transparent,side:e.side,vertexShader:d,fragmentShader:f});return u.name=r,this.materialsCache.push(u),u}},{key:"_writeUniformsFromMaterialDescription",value:function(e,t){e.map.value=this.textures[t.map]||e.map.value,e.normalMap.value=this.textures[t.normalMap]||e.normalMap.value,e.bumpMap.value=this.textures[t.bumpMap]||e.bumpMap.value,e.roughnessMap.value=this.textures[t.roughnessMap]||e.roughnessMap.value,e.diffuse.value=t.color?new THREE.Color(t.color):e.diffuse.value,e.roughness.value=t.roughness||e.roughness.value,e.metalness.value=t.metalness||e.metalness.value,t.repeat&&(e.offsetRepeat.value.set(0,0,t.repeat[0],t.repeat[1]),e.map.value.wrapS=e.map.value.wrapT=THREE.RepeatWrapping,e.map.value.repeat.set(t.repeat[0],t.repeat[1]),e.normalMap&&e.normalMap.value&&(e.normalMap.value.wrapS=e.normalMap.value.wrapT=THREE.RepeatWrapping,e.normalMap.value.repeat.set(t.repeat[0],t.repeat[1])),e.bumpMap&&e.bumpMap.value&&(e.bumpMap.value.wrapS=e.bumpMap.value.wrapT=THREE.RepeatWrapping,e.bumpMap.value.repeat.set(t.repeat[0],t.repeat[1])),e.roughnessMap&&e.roughnessMap.value&&(e.roughnessMap.value.wrapS=e.roughnessMap.value.wrapT=THREE.RepeatWrapping,e.roughnessMap.value.repeat.set(t.repeat[0],t.repeat[1]))),t.offset&&(e.offsetRepeat.value.x=t.offset[0],e.offsetRepeat.value.y=t.offset[1])}},{key:"_getMaterialDefines",value:function(e){var t="";return e.map.value&&(t+="#define USE_MAP 1\n"),e.lightMap.value&&(t+="#define USE_LIGHTMAP 1\n"),e.bumpMap.value&&(t+="#define USE_BUMPMAP 1\n"),e.normalMap.value&&(t+="#define USE_NORMALMAP 1\n"),e.roughnessMap.value&&(t+="#define USE_ROUGHNESSMAP 1\n"),t}}]),e}();t.default=c},function(e,t){e.exports="#define SHADER_NAME ShaderMaterial\n#define VERTEX_TEXTURES\n#define GAMMA_FACTOR 2\n#define MAX_BONES 251\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n\n#ifdef IS_FOLIAGE\nvarying float vDepth;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n\n#define STANDARD\n\n#define GAMMA_FACTOR 2\n\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif\n\n#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvarying vec3 vReflect;\n\tuniform float refractionRatio;\n#endif\n\n#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n#endif\n\n#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif\n#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif\n\nvoid main() {\n\t#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif\n\t#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif\n\t#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif\n\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n\n#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif\n#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n\n#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\nvec3 transformed = vec3( position );\n\n#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n\n#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n\n#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n\n\tvViewPosition = - mvPosition.xyz;\n#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t#ifdef ENVMAP_MODE_REFLECTION\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t#else\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n    #if NUM_DIR_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n    \t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n    \t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n    \t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n#endif\n}\n"},function(e,t){e.exports="#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\n\n#define SHADER_NAME ShaderMaterial\n#define GAMMA_FACTOR 2\nuniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n#define TONE_MAPPING\n#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n\nvec3 toneMapping( vec3 color ) { return LinearToneMapping( color ); }\n\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n\nvec4 mapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\nvec4 envMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\nvec4 emissiveMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\nvec4 linearToOutputTexel( vec4 value ) { return LinearToLinear( value ); }\n\n#define STANDARD\n\n#define GAMMA_FACTOR 2\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifdef IS_FOLIAGE\nvarying float vDepth;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n\n#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n\n#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif\n#if defined( USE_SSAOMAP )\n    uniform highp sampler2D ssaoMap;\n    uniform float ssaoMapIntensity;\n    uniform vec2 screenResolution;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n\n#if defined( USE_ENVMAP ) || defined( STANDARD )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n\n#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\nbool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_Smith( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n\n#ifdef ENVMAP_TYPE_CUBE_UV\nconst float cubeUV_textureSize = 1024.0;\nint getFaceFromDirection(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    int face = -1;\n    if( absDirection.x > absDirection.z ) {\n        if(absDirection.x > absDirection.y )\n            face = direction.x > 0.0 ? 0 : 3;\n        else\n            face = direction.y > 0.0 ? 1 : 4;\n    }\n    else {\n        if(absDirection.z > absDirection.y )\n            face = direction.z > 0.0 ? 2 : 5;\n        else\n            face = direction.y > 0.0 ? 1 : 4;\n    }\n    return face;\n}\nconst float cubeUV_maxLods1 = log2(cubeUV_textureSize*0.25) - 1.0;\nconst float cubeUV_rangeClamp = exp2((6.0 - 1.0) * 2.0);\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n    float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n    float dxRoughness = dFdx(roughness);\n    float dyRoughness = dFdy(roughness);\n    vec3 dx = dFdx( vec * scale * dxRoughness );\n    vec3 dy = dFdy( vec * scale * dyRoughness );\n    float d = max( dot( dx, dx ), dot( dy, dy ) );\n    d = clamp(d, 1.0, cubeUV_rangeClamp);\n    float mipLevel = 0.5 * log2(d);\n    return vec2(floor(mipLevel), fract(mipLevel));\n}\nconst float cubeUV_maxLods2 = log2(cubeUV_textureSize*0.25) - 2.0;\nconst float cubeUV_rcpTextureSize = 1.0 / cubeUV_textureSize;\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n    mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n    float a = 16.0 * cubeUV_rcpTextureSize;\n    vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n    vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n    float powScale = exp2_packed.x * exp2_packed.y;\n    float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n    float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n    bool bRes = mipLevel == 0.0;\n    scale =  bRes && (scale < a) ? a : scale;\n    vec3 r;\n    vec2 offset;\n    int face = getFaceFromDirection(direction);\n    float rcpPowScale = 1.0 / powScale;\n    if( face == 0) {\n        r = vec3(direction.x, -direction.z, direction.y);\n        offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 1) {\n        r = vec3(direction.y, direction.x, direction.z);\n        offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 2) {\n        r = vec3(direction.z, direction.x, direction.y);\n        offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 3) {\n        r = vec3(direction.x, direction.z, direction.y);\n        offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    else if( face == 4) {\n        r = vec3(direction.y, direction.x, -direction.z);\n        offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    else {\n        r = vec3(direction.z, -direction.x, direction.y);\n        offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    r = normalize(r);\n    float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n    vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n    vec2 base = offset + vec2( texelOffset );\n    return base + s * ( scale - 2.0 * texelOffset );\n}\nconst float cubeUV_maxLods3 = log2(cubeUV_textureSize*0.25) - 3.0;\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n    float roughnessVal = roughness* cubeUV_maxLods3;\n    float r1 = floor(roughnessVal);\n    float r2 = r1 + 1.0;\n    float t = fract(roughnessVal);\n    vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n    float s = mipInfo.y;\n    float level0 = mipInfo.x;\n    float level1 = level0 + 1.0;\n    level1 = level1 > 5.0 ? 5.0 : level1;\n    level0 += min( floor( s + 0.5 ), 5.0 );\n    vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n    vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n    vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n    vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n    vec4 result = mix(color10, color20, t);\n    return vec4(result.rgb, 1.0);\n}\n#endif\n\nuniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tirradiance *= PI;\n\n\t\t#endif\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal = 1.0;\n\t\t#endif\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal = 1.0;\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t#endif\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n\nstruct StandardMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n};\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Standard\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Standard\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Standard\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n\n#ifdef USE_SHADOWMAP\n    #if NUM_DIR_LIGHTS > 0\n        uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n        varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n    #endif\n\n    #if NUM_SPOT_LIGHTS > 0\n        uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n        varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n    #endif\n\n    #if NUM_POINT_LIGHTS > 0\n        uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n        varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n    #endif\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\treturn dot( rgba_depth, bit_shift );\n\t}\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n\n#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n\n#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n\n#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif\n#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\tvec3 totalEmissiveRadiance = emissive;\n\t#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif\n\t#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n\t#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif\n\t#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n\n\t#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n\n\tfloat specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif\n\tfloat roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n\n\tfloat metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n\n\t#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n\n\t#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n\nStandardMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\n\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n    #if ( NUM_HEMI_LIGHTS > 0 )\n    \t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n    \t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n    \t\t}\n    \t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n\n\t#if defined( USE_AOMAP ) || defined ( USE_SSAOMAP )\n    #ifdef USE_AOMAP\n\t   float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n       reflectedLight.indirectDiffuse *= ambientOcclusion;\n    #endif\n    #ifdef USE_SSAOMAP\n       vec2 screenPos = gl_FragCoord.xy / screenResolution;\n\t   float ambientOcclusion = texture2D( ssaoMap, screenPos ).r * ssaoMapIntensity;\n       reflectedLight.indirectDiffuse *= ambientOcclusion;\n    #endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n\n\t#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n\n\t  gl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n\n// #ifdef USE_MAP\n//     gl_FragColor = texture2D( map, vUv );\n//     #endif\n// gl_FragColor.rgb = texture2D( ssaoMap, gl_FragCoord.xy / screenResolution ).rgb;\n}\n";
},function(e,t){e.exports="#define SHADER_NAME ShaderMaterial\n#define VERTEX_TEXTURES\n#define GAMMA_FACTOR 2\n#define MAX_BONES 251\n#define LEAF_AMPLITUDE 80.\n#define LEAF_PERIOD 1.\n#define TREE_AMPLITUDE 0.015\n#define TREE_PERIOD 0.8\n// uniform mat4 modelMatrix;\n// uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nattribute vec4 transform1;\nattribute vec4 transform2;\nattribute vec4 transform3;\nvec4 transform4 = vec4(0.0, 0.0, 0.0, 1.0);\n\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n\n#define STANDARD\n\n#define GAMMA_FACTOR 2\n\nvarying vec3 vViewPosition;\n#ifdef IS_FOLIAGE\nvarying float vDepth;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif\n\n#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvarying vec3 vReflect;\n\tuniform float refractionRatio;\n#endif\n\n#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n#endif\n\n#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif\n#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif\n\nhighp mat4 transpose(in highp mat4 inMatrix) {\n    highp vec4 i0 = inMatrix[0];\n    highp vec4 i1 = inMatrix[1];\n    highp vec4 i2 = inMatrix[2];\n    highp vec4 i3 = inMatrix[3];\n\n    highp mat4 outMatrix = mat4(\n         vec4(i0.x, i1.x, i2.x, i3.x),\n         vec4(i0.y, i1.y, i2.y, i3.y),\n         vec4(i0.z, i1.z, i2.z, i3.z),\n         vec4(i0.w, i1.w, i2.w, i3.w)\n         );\n\n    return outMatrix;\n}\n\nvoid main() {\n    mat4 modelMatrix = transpose(mat4(transform1, transform2, transform3, transform4));\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\t#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif\n\t#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif\n\t#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif\n\nvec3 tr1 = vec3(transform1.x, transform2.x, transform3.x);\nvec3 tr2 = vec3(transform1.y, transform2.y, transform3.y);\nvec3 tr3 = vec3(transform1.z, transform2.z, transform3.z);\n\nvec3 objectNormal = mat3(tr1, tr2, tr3) * vec3( normal );\n\n#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n\n#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif\n#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n\n#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\nvec3 transformed = vec3( position );\n\n#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n\n#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n\n\n#if defined( IS_TREE ) || defined( IS_FOLIAGE )\nfloat randSeed = transform1.w + transform2.w + transform3.w;\nfloat randomVal = fract(sin(randSeed * 12356.332));\ntransformed.x += randomVal * TREE_AMPLITUDE * cos(time * TREE_PERIOD + randomVal * 20.) * transformed.z;\ntransformed.y += randomVal * TREE_AMPLITUDE * sin(time * TREE_PERIOD + randomVal * 20.) * transformed.z;\n#endif\n#ifdef IS_FOLIAGE\ntransformed += LEAF_AMPLITUDE * normal * cos(time * LEAF_PERIOD + randomVal * 7.) * uv.y;\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n\n#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n\n\tvViewPosition = - mvPosition.xyz;\n#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\nworldPosition.y += time * 1000.;\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t#ifdef ENVMAP_MODE_REFLECTION\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t#else\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n    #if NUM_DIR_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n    \t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n    \t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n    \t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n#endif\n\n#ifdef IS_FOLIAGE\nvDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\n#endif\n}\n"},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(3),s=o(a),c=n(15),l=o(c),d=function(){function e(t){var n=this;i(this,e),this.scene=t,this.navMeshes=[],this.doorMeshes=this.findDoorMeshes(this.scene),this.doors=this.createDoors(this.doorMeshes),this.doors.forEach(function(e){n.navMeshes.push(e.underDoorNavMesh)})}return r(e,[{key:"findDoorMeshes",value:function(e){var t=[];return e.traverse(function(e){e.name.includes("door_root")&&t.push(e)}),t}},{key:"createDoors",value:function(e){var t=[],n=void 0;return e.forEach(function(e){n=new l.default(e,s.default.appLogic.doors),t.push(n)}),t}},{key:"update",value:function(e,t){this.doors.forEach(function(t){t.update(e)})}}]),e}();t.default=d},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i={OPEN:0,CLOSED:1,OPENING:2,CLOSING:3},r=function(){function e(t,o){var r=this;n(this,e),this.openingTime=o.openingTime,this.mesh=t,this.underDoorNavMesh=null,this.doorLeft=null,this.doorRight=null,this.state=void 0,this._tPos=null;for(var a=0;a<this.mesh.children.length;a++)this.mesh.children[a].name.includes("door_nav_blocker")?this.underDoorNavMesh=this.mesh.children[a]:this.mesh.children[a].name.includes("door_left")?this.doorLeft=this.mesh.children[a]:this.mesh.children[a].name.includes("door_right")&&(this.doorRight=this.mesh.children[a]);this.originalNavMeshZ=this.underDoorNavMesh.position.z,this.originalLeftY=this.doorLeft.position.y,this.originalRightY=this.doorRight.position.y,this.openLeftY=this.originalLeftY+4.3,this.openRightY=this.originalRightY-4.3,this.resetClosed(),document.addEventListener("toogleDoors",function(){r.state===i.CLOSED&&r.open(),r.state===i.OPEN&&r.close()})}return o(e,[{key:"resetClosed",value:function(){this.underDoorNavMesh.position.z=-1e4,this.doorLeft.position.y=this.originalLeftY,this.doorRight.position.y=this.originalRightY,this.state=i.CLOSED}},{key:"resetOpen",value:function(){this.underDoorNavMesh.position.z=this.originalNavMeshZ,this.doorLeft.position.y=this.openLeftY,this.doorRight.position.y=this.openRightY,this.state=i.OPEN}},{key:"open",value:function(){this.state===i.CLOSED&&(this.state=i.OPENING,this.progress=0)}},{key:"close",value:function(){this.state===i.OPEN&&(this.state=i.CLOSING,this.progress=1,this.underDoorNavMesh.position.z=-1e4)}},{key:"update",value:function(e){this.state!==i.OPEN&&this.state!==i.CLOSED&&(this.state===i.OPENING?1===this.progress?(this.state=i.OPEN,this.underDoorNavMesh.position.z=this.originalNavMeshZ):(this.progress+=e/this.openingTime,this.progress=Math.min(this.progress,1),this.updateDoorPosition()):this.state===i.CLOSING&&(0===this.progress?this.state=i.CLOSED:(this.progress-=e/this.openingTime,this.progress=Math.max(this.progress,0),this.updateDoorPosition())))}},{key:"updateDoorPosition",value:function(){this._tPos=this.ease(this.progress),this.doorLeft.position.y=(1-this._tPos)*this.originalLeftY+this._tPos*this.openLeftY,this.doorRight.position.y=(1-this._tPos)*this.originalRightY+this._tPos*this.openRightY}},{key:"ease",value:function(e){return e*e}}]),e}();t.default=r},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(3),s=o(a),c=n(17),l=o(c);window.THREE=window.THREE||THREE,n(18),n(19);var d=n(20)(),f=void 0,u={height:10,moveForward:!1,moveLeft:!1,moveBackward:!1,moveRight:!1,speedModifier:1,shiftSpeedModifier:2,jump:!1,isJumping:!1,moveForwardBackMultiplier:1,moveLeftRightMultiplier:.9,mobileRotateHorizontalMult:.35,mobileRotateVerticalMult:.5,mobileLookLeftRight:0,mobileLookUpDown:0,velocity:new THREE.Vector3(0,0,0),raycaster:new THREE.Raycaster(new THREE.Vector3,new THREE.Vector3(0,-1,0),0,20),walkingSpeed:200,jumpStrength:17,gravity:50},h=new THREE.Vector3,m=new THREE.Vector3,p=new THREE.Vector3,v=function(e){switch(e.keyCode){case 38:case 87:u.moveForward=!0;break;case 37:case 65:u.moveLeft=!0;break;case 40:case 83:u.moveBackward=!0;break;case 39:case 68:u.moveRight=!0;break;case 16:u.speedModifier=u.shiftSpeedModifier;break;case 32:u.jump=!0;break;case 27:this.orbitControls.enabled||this.disableWalker()}},g=function(e){switch(e.keyCode){case 38:case 87:u.moveForward=!1;break;case 37:case 65:u.moveLeft=!1;break;case 40:case 83:u.moveBackward=!1;break;case 39:case 68:u.moveRight=!1;break;case 16:u.speedModifier=1;break;case 32:u.jump=!1}},E=function(){function e(t,n,o){i(this,e),f=this,this.camera=t,this.domElement=n,this.walkerEnabled=!1,this.isDesktop=d.desktop(),this.rotateOnMouseDown=!1,this.walkerTouchControls=null,this.orbitControls=new THREE.OrbitControls(t,n),this.orbitControls.enableDamping=!0,this.orbitControls.minDistance=s.default.controls.minDistance,this.orbitControls.maxDistance=s.default.controls.maxDistance,this.orbitControls.rotateSpeed=s.default.controls.rotateSpeed,this.infoEl=document.createElement("div"),this.infoEl.className="buttonsRoot",this.infoEl.style.background="rgba(255,255,255,0.4)",this.isDesktop?this.infoEl.innerHTML="Controls: WASD / Space / Shift + mouse. Press Escape to exit.":(this.infoEl.style.width="60%",this.infoEl.style.height="20%",this.infoEl.style.right="0",this.infoEl.innerHTML="Controls: touch joystick to move, touch out of joystick to look around."),this.walkerControls=new THREE.PointerLockControls(t,n),this._controlsObject=this.walkerControls.getObject(),this._controlsObject.name="pointerLockObject",o.add(this._controlsObject),this.resetCameraOrbit(),this.navMeshes=[],this.onKeyDown=v.bind(this),this.onKeyUp=g.bind(this),this.resetCameraOrbit(),document.addEventListener("startQuest",this.enableWalker.bind(this))}return r(e,[{key:"enableWalker",value:function(){this.orbitControls.enabled&&(this.resetCameraWalker(),this._controlsObject.position.fromArray([-47,8,-29]),this._controlsObject.rotation.y=-1,this._controlsObject.children[0].rotation.x=0,this.rotateOnMouseDown=!1,this.isDesktop?(this._addKeyboardListeners(),this._preparePointerLock()||(this.rotateOnMouseDown=!0,this._rotateOnMouseDownEnable())):(this.walkerTouchControls||(this.walkerTouchControls=new l.default(u,s.default)),this.walkerTouchControls.enable(),this.walkerTouchControls.resetJoystickDiv()),document.body.appendChild(this.infoEl),this.orbitControls.enabled=!1,this.walkerControls.enabled=!this.rotateOnMouseDown)}},{key:"disableWalker",value:function(){this.resetCameraOrbit(),this.isDesktop?(this._removeKeyboardListeners(),this._removePointerLock(),this.rotateOnMouseDown&&this._rotateOnMouseDownDisable()):this.walkerTouchControls.disable(),document.body.removeChild(this.infoEl),this.orbitControls.enabled=!0,this.walkerControls.enabled=!1}},{key:"addNavMeshes",value:function(e){if(!(e instanceof Array))throw new Error("controls.addBlockers method expects Array as argument");Array.prototype.push.apply(this.navMeshes,e)}},{key:"resetCameraOrbit",value:function(){this.camera.position.fromArray(s.default.camera.cameraPos),this.camera.lookAt(new THREE.Vector3(0,0,0)),this.camera.near=s.default.camera.near,this.camera.far=s.default.camera.far,this.camera.updateProjectionMatrix(),this._controlsObject.position.set(0,0,0),this._controlsObject.rotation.y=0,this._controlsObject.children[0].rotation.x=0}},{key:"resetCameraWalker",value:function(){this.camera.position.set(0,0,0),this.camera.rotation.set(0,0,0),this.camera.near=s.default.camera.walkerNear,this.camera.far=s.default.camera.walkerFar,this.camera.updateProjectionMatrix()}},{key:"update",value:function(e){if(this.orbitControls.enabled)this.orbitControls.update();else{var t=this._controlsObject;this.isDesktop||(t.rotation.y-=u.mobileLookLeftRight*u.mobileRotateHorizontalMult*e,t.children[0].rotation.x+=u.mobileLookUpDown*u.mobileRotateVerticalMult*e,t.children[0].rotation.x=Math.min(Math.max(t.children[0].rotation.x,-Math.PI/2),Math.PI/2),this.walkerTouchControls.applyInertia());var n=void 0;u.raycaster.ray.origin.copy(t.position);var o=[];o=u.raycaster.intersectObjects(this.navMeshes,!1);var i=o.length>0;u.velocity.x-=10*u.velocity.x*e,u.velocity.z-=10*u.velocity.z*e,u.velocity.y-=u.gravity*e,u.moveForward&&(u.velocity.z-=u.walkingSpeed*u.speedModifier*u.moveForwardBackMultiplier*e),u.moveBackward&&(u.velocity.z+=u.walkingSpeed*u.speedModifier*u.moveForwardBackMultiplier*e),u.moveLeft&&(u.velocity.x-=u.walkingSpeed*u.speedModifier*u.moveLeftRightMultiplier*e),u.moveRight&&(u.velocity.x+=u.walkingSpeed*u.speedModifier*u.moveLeftRightMultiplier*e),u.jump&&!u.isJumping&&(u.velocity.y=u.jumpStrength,u.isJumping=!0),i&&(n=o[0],n.distance+u.velocity.y*e<=u.height&&(t.position.y=o[0].point.y+u.height,u.velocity.y=0,u.isJumping=!1)),t.translateY(u.velocity.y*e);var r=t.position.clone();t.translateX(u.velocity.x*e),t.translateZ(u.velocity.z*e),u.raycaster.ray.origin.copy(t.position),o=[],o=u.raycaster.intersectObjects(this.navMeshes,!1);var a=o.length>0;if(i&&!a){var s=t.position.clone(),c=n.object.geometry.attributes.position.array;h.fromArray(c,3*n.face.a).applyMatrix4(n.object.matrixWorld),m.fromArray(c,3*n.face.b).applyMatrix4(n.object.matrixWorld),p.fromArray(c,3*n.face.c).applyMatrix4(n.object.matrixWorld);var l=new THREE.Vector3(0).add(h).add(m).add(p).divideScalar(3),d=this._linesIntersectsXZ(h,m,r,s);if(d.intersect||(d=this._linesIntersectsXZ(m,p,r,s),d.intersect||(d=this._linesIntersectsXZ(h,p,r,s))),d.intersect){var f=d.A,v=d.B,g=(new THREE.Vector3).subVectors(v,f),E=(new THREE.Vector3).subVectors(t.position,f).projectOnVector(g);E.add(f),E.add((new THREE.Vector3).subVectors(l,E).divideScalar(1e3)),E.y=r.y,t.position.copy(E)}else t.position.copy(r);u.raycaster.ray.origin.copy(t.position),o=[],o=u.raycaster.intersectObjects(this.navMeshes,!1),o.length<1&&t.position.copy(r)}}}},{key:"_linesIntersectsXZ",value:function(e,t,n,o){var i=new THREE.Vector2(t.x-e.x,t.z-e.z),r=new THREE.Vector2(o.x-n.x,o.z-n.z),a=(-i.y*(e.x-n.x)+i.x*(e.z-n.z))/(-r.x*i.y+i.x*r.y),s=(r.x*(e.z-n.z)-r.y*(e.x-n.x))/(-r.x*i.y+i.x*r.y),c=a>=0&&a<=1&&s>=0&&s<=1;return{intersect:c,A:e,B:t}}},{key:"_rotateOnMouseDownEnable",value:function(){this.domElement.addEventListener("mousedown",this._onMousePressTouchStart,!1),this.domElement.addEventListener("mouseup",this._onMouseReleaseTouchEnd,!1),this.domElement.addEventListener("mouseout",this._onMouseReleaseTouchEnd,!1)}},{key:"_rotateOnMouseDownDisable",value:function(){this.domElement.removeEventListener("mousedown",this._onMousePressTouchStart,!1),this.domElement.removeEventListener("mouseup",this._onMouseReleaseTouchEnd,!1),this.domElement.removeEventListener("mouseout",this._onMouseReleaseTouchEnd,!1)}},{key:"_onMousePressTouchStart",value:function(e){e.preventDefault(),e.changedTouches&&e.changedTouches.length&&!f.walkerControls.enabled||(f.walkerControls.mouseLastPos.x=e.clientX,f.walkerControls.mouseLastPos.y=e.clientY),f.walkerControls.enabled=!0}},{key:"_onMouseReleaseTouchEnd",value:function(){f.walkerControls.enabled=!1}},{key:"_pointerlockchange",value:function(){var e=document.body;document.pointerLockElement===e||document.mozPointerLockElement===e||document.webkitPointerLockElement===e||f.orbitControls.enabled||f.disableWalker()}},{key:"_pointerlockerror",value:function(){var e=document.body;e.innerHTML="PointerLock Error"}},{key:"_preparePointerLock",value:function(){var e=document.body,t=!1;return("pointerLockElement"in document||"mozPointerLockElement"in document||"webkitPointerLockElement"in document)&&(document.addEventListener("pointerlockchange",this._pointerlockchange,!1),document.addEventListener("mozpointerlockchange",this._pointerlockchange,!1),document.addEventListener("webkitpointerlockchange",this._pointerlockchange,!1),document.addEventListener("pointerlockerror",this._pointerlockerror,!1),document.addEventListener("mozpointerlockerror",this._pointerlockerror,!1),document.addEventListener("webkitpointerlockerror",this._pointerlockerror,!1),e.requestPointerLock=e.requestPointerLock||e.mozRequestPointerLock||e.webkitRequestPointerLock,e.requestPointerLock(),t=!0),t}},{key:"_removePointerLock",value:function(){document.removeEventListener("pointerlockchange",this._pointerlockchange,!1),document.removeEventListener("mozpointerlockchange",this._pointerlockchange,!1),document.removeEventListener("webkitpointerlockchange",this._pointerlockchange,!1),document.removeEventListener("pointerlockerror",this._pointerlockerror,!1),document.removeEventListener("mozpointerlockerror",this._pointerlockerror,!1),document.removeEventListener("webkitpointerlockerror",this._pointerlockerror,!1)}},{key:"_addKeyboardListeners",value:function(){document.addEventListener("keydown",this.onKeyDown,!1),document.addEventListener("keyup",this.onKeyUp,!1)}},{key:"_removeKeyboardListeners",value:function(){document.removeEventListener("keydown",this.onKeyDown,!1),document.removeEventListener("keyup",this.onKeyUp,!1)}},{key:"dispose",value:function(){this.orbitControls.dispose(),this.walkerControls.dispose()}}]),e}();t.default=E},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=void 0,r=void 0,a=void 0,s=void 0,c=void 0,l=void 0,d=void 0,f=void 0,u=void 0,h=void 0,m=void 0,p=void 0,v=void 0,g=void 0,E=void 0,b=void 0,x=void 0,M=function(){function e(t,o){var i=this;n(this,e),this.walkerVars=t,this.joystickReturnSpeed=o.visParams.joystickReturnSpeed,this._createDivs(),this._applyStyles(),this.moveTouchId=null,this.lookTouchId=null,this.jumpTouchId=null,this.lastMoveTouchPos=new THREE.Vector2,this.lastLookTouchPos=new THREE.Vector2,this._back.addEventListener("touchstart",function(e){Number.isInteger(i.moveTouchId)||(i.moveTouchId=e.changedTouches[0].identifier,i._onMoveTouchChange(e.changedTouches[0]),i._back.style.opacity="0.8")}),this._lookJoystickCont.addEventListener("touchstart",function(e){Number.isInteger(i.lookTouchId)||(i.lookTouchId=e.changedTouches[0].identifier,i.lastLookTouchPos.set(e.changedTouches[0].screenX,e.changedTouches[0].screenY))}),document.addEventListener("touchmove",function(e){i._onTouchMove(e)}),document.addEventListener("touchend",function(e){i._onTouchEnd(e)}),document.addEventListener("touchcancel",function(e){i._onTouchEnd(e)}),this._jumpButtonCont.addEventListener("touchstart",function(e){i.jumpTouchId=e.changedTouches[0].identifier,i.walkerVars.jump=!0})}return o(e,[{key:"enable",value:function(){document.body.appendChild(this._moveJoystickCont),document.body.appendChild(this._lookJoystickCont),document.body.appendChild(this._jumpButtonCont)}},{key:"disable",value:function(){document.body.removeChild(this._moveJoystickCont),document.body.removeChild(this._lookJoystickCont),document.body.removeChild(this._jumpButtonCont)}},{key:"applyInertia",value:function(){this.walkerVars.mobileLookLeftRight/=2,this.walkerVars.mobileLookUpDown/=2,Number.isInteger(this.moveTouchId)||this._smoothResetJoystickDiv()}},{key:"_onTouchMove",value:function(e){e.preventDefault();for(var t=0;t<e.changedTouches.length;t++)e.changedTouches[t].identifier===this.moveTouchId?this._onMoveTouchChange(e.changedTouches[t]):e.changedTouches[t].identifier===this.lookTouchId&&this._onLookTouchChange(e.changedTouches[t])}},{key:"_onTouchEnd",value:function(e){for(var t=0;t<e.changedTouches.length;t++)e.changedTouches[t].identifier===this.moveTouchId?(this.moveTouchId=null,this._back.style.opacity="0.6",this.walkerVars.moveForward=!1,this.walkerVars.moveBackward=!1,this.walkerVars.moveRight=!1,this.walkerVars.moveLeft=!1):e.changedTouches[t].identifier===this.lookTouchId?this.lookTouchId=null:e.changedTouches[t].identifier===this.jumpTouchId&&(this.jumpTouchId=null,this.walkerVars.jump=!1)}},{key:"resetJoystickDiv",value:function(){this._front.style.marginLeft=this._back.clientWidth/2-this._front.clientWidth/2-1+"px",this._front.style.marginTop=this._back.clientHeight/2-this._front.clientHeight/2-1+"px"}},{key:"_smoothResetJoystickDiv",value:function(){i=this._back.clientWidth/2-this._front.clientWidth/2-1,r=this._back.clientHeight/2-this._front.clientHeight/2-1,a=this._front.offsetLeft,s=this._front.offsetTop,c=i-a,l=r-s,d=Math.sqrt(c*c+l*l),c/=d,l/=d,f=a+c*this.joystickReturnSpeed,u=s+l*this.joystickReturnSpeed,h=(f-i)*(f-i)+(u-r)*(u-r),h<this.joystickReturnSpeed*this.joystickReturnSpeed&&(f=i,u=r),this._front.style.marginLeft=f+"px",this._front.style.marginTop=u+"px"}},{key:"_onMoveTouchChange",value:function(e){v=this._moveJoystickCont.offsetLeft+this._back.clientWidth/2,g=this._moveJoystickCont.offsetTop+this._back.clientHeight/2,m=e.clientX-v,p=e.clientY-g,E=this._back.clientWidth/2-this._front.clientWidth/2,b=this._back.clientHeight/2-this._front.clientHeight/2,x=Math.sqrt(m*m+p*p)/(this._moveJoystickCont.clientWidth/2),x>1&&(m/=x,p/=x),this._front.style.marginLeft=E+m+"px",this._front.style.marginTop=b+p+"px",m/=this._moveJoystickCont.clientWidth/2,p/=this._moveJoystickCont.clientWidth/2,this.walkerVars.moveForward=p<0,this.walkerVars.moveBackward=p>0,this.walkerVars.moveRight=m>0,this.walkerVars.moveLeft=m<0,this.walkerVars.moveForwardBackMultiplier=Math.abs(p),this.walkerVars.moveLeftRightMultiplier=Math.abs(m)}},{key:"_onLookTouchChange",value:function(e){m=e.screenX-this.lastLookTouchPos.x,p=-(e.screenY-this.lastLookTouchPos.y),this.walkerVars.mobileLookLeftRight=m,this.walkerVars.mobileLookUpDown=p,this.lastLookTouchPos.set(e.screenX,e.screenY)}},{key:"_createDivs",value:function(){this._moveJoystickCont=document.createElement("div.moveJoystickCont"),this._back=document.createElement("div.moveJoystickBack"),this._front=document.createElement("div.moveJoystickFront"),this._moveJoystickCont.appendChild(this._back),this._back.appendChild(this._front),this._lookJoystickCont=document.createElement("div.lookJoystickCont"),this._jumpButtonCont=document.createElement("div.jumpButtonCont"),this._jumpButton=document.createElement("div.jumpButton"),this._jumpButton.innerHTML="Jump",this._jumpButtonCont.appendChild(this._jumpButton)}},{key:"_applyStyles",value:function(){var e=this._moveJoystickCont,t=this._back,n=this._front,o=this._lookJoystickCont;e.style.position="absolute",e.style.left="5vw",e.style.bottom="10vh",e.style.width="25vw",e.style.height="25vw",e.style.zIndex="1",t.style.width="100%",t.style.height="100%",t.style.display="table",t.style.backgroundColor="#333333",t.style.opacity="0.6",t.style.borderRadius="50%",n.style.width="50%",n.style.height="50%",n.style.display="block",n.style.backgroundColor="#000000",n.style.borderRadius="50%",n.style.borderStyle="dashed",n.style.borderColor="white",o.style.height="80%",o.style.position="absolute",o.style.width="100%",o.style.bottom="0",o.style.right="0",this._jumpButtonCont.className="exitWalkerMobile",this._jumpButton.className="exitWalkerMobileButton",this._jumpButtonCont.style.display="table",this._jumpButtonCont.style.right="0",
this._jumpButtonCont.style.left="auto"}}]),e}();t.default=M},function(e,t){THREE.OrbitControls=function(e,t){function n(){return 2*Math.PI/60/60*N.autoRotateSpeed}function o(){return Math.pow(.95,N.zoomSpeed)}function i(e){G.theta-=e}function r(e){G.phi-=e}function a(e){N.object instanceof THREE.PerspectiveCamera?F/=e:N.object instanceof THREE.OrthographicCamera?(N.object.zoom=Math.max(N.minZoom,Math.min(N.maxZoom,N.object.zoom*e)),N.object.updateProjectionMatrix(),B=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),N.enableZoom=!1)}function s(e){N.object instanceof THREE.PerspectiveCamera?F*=e:N.object instanceof THREE.OrthographicCamera?(N.object.zoom=Math.max(N.minZoom,Math.min(N.maxZoom,N.object.zoom/e)),N.object.updateProjectionMatrix(),B=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),N.enableZoom=!1)}function c(e){X.set(e.clientX,e.clientY)}function l(e){J.set(e.clientX,e.clientY)}function d(e){Z.set(e.clientX,e.clientY)}function f(e){Y.set(e.clientX,e.clientY),W.subVectors(Y,X);var t=N.domElement===document?N.domElement.body:N.domElement;i(2*Math.PI*W.x/t.clientWidth*N.rotateSpeed),r(2*Math.PI*W.y/t.clientHeight*N.rotateSpeed),X.copy(Y),N.update()}function u(e){Q.set(e.clientX,e.clientY),$.subVectors(Q,J),$.y>0?a(o()):$.y<0&&s(o()),J.copy(Q),N.update()}function h(e){q.set(e.clientX,e.clientY),K.subVectors(q,Z),ne(K.x,K.y),Z.copy(q),N.update()}function m(e){}function p(e){e.deltaY<0?s(o()):e.deltaY>0&&a(o()),N.update()}function v(e){switch(e.keyCode){case N.keys.UP:ne(0,N.keyPanSpeed),N.update();break;case N.keys.BOTTOM:ne(0,-N.keyPanSpeed),N.update();break;case N.keys.LEFT:ne(N.keyPanSpeed,0),N.update();break;case N.keys.RIGHT:ne(-N.keyPanSpeed,0),N.update()}}function g(e){X.set(e.touches[0].pageX,e.touches[0].pageY)}function E(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,o=Math.sqrt(t*t+n*n);J.set(0,o)}function b(e){Z.set(e.touches[0].pageX,e.touches[0].pageY)}function x(e){Y.set(e.touches[0].pageX,e.touches[0].pageY),W.subVectors(Y,X);var t=N.domElement===document?N.domElement.body:N.domElement;i(2*Math.PI*W.x/t.clientWidth*N.rotateSpeed),r(2*Math.PI*W.y/t.clientHeight*N.rotateSpeed),X.copy(Y),N.update()}function M(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);Q.set(0,i),$.subVectors(Q,J),$.y>0?s(o()):$.y<0&&a(o()),J.copy(Q),N.update()}function y(e){q.set(e.touches[0].pageX,e.touches[0].pageY),K.subVectors(q,Z),ne(K.x,K.y),Z.copy(q),N.update()}function _(e){}function T(e){if(N.enabled!==!1){if(e.preventDefault(),e.button===N.mouseButtons.ORBIT){if(N.enableRotate===!1)return;c(e),H=U.ROTATE}else if(e.button===N.mouseButtons.ZOOM){if(N.enableZoom===!1)return;l(e),H=U.DOLLY}else if(e.button===N.mouseButtons.PAN){if(N.enablePan===!1)return;d(e),H=U.PAN}H!==U.NONE&&(document.addEventListener("mousemove",L,!1),document.addEventListener("mouseup",w,!1),N.dispatchEvent(I))}}function L(e){if(N.enabled!==!1)if(e.preventDefault(),H===U.ROTATE){if(N.enableRotate===!1)return;f(e)}else if(H===U.DOLLY){if(N.enableZoom===!1)return;u(e)}else if(H===U.PAN){if(N.enablePan===!1)return;h(e)}}function w(e){N.enabled!==!1&&(m(e),document.removeEventListener("mousemove",L,!1),document.removeEventListener("mouseup",w,!1),N.dispatchEvent(A),H=U.NONE)}function S(e){N.enabled===!1||N.enableZoom===!1||H!==U.NONE&&H!==U.ROTATE||(e.preventDefault(),e.stopPropagation(),p(e),N.dispatchEvent(I),N.dispatchEvent(A))}function P(e){N.enabled!==!1&&N.enableKeys!==!1&&N.enablePan!==!1&&v(e)}function R(e){if(N.enabled!==!1){switch(e.touches.length){case 1:if(N.enableRotate===!1)return;g(e),H=U.TOUCH_ROTATE;break;case 2:if(N.enableZoom===!1)return;E(e),H=U.TOUCH_DOLLY;break;case 3:if(N.enablePan===!1)return;b(e),H=U.TOUCH_PAN;break;default:H=U.NONE}H!==U.NONE&&N.dispatchEvent(I)}}function D(e){if(N.enabled!==!1)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(N.enableRotate===!1)return;if(H!==U.TOUCH_ROTATE)return;x(e);break;case 2:if(N.enableZoom===!1)return;if(H!==U.TOUCH_DOLLY)return;M(e);break;case 3:if(N.enablePan===!1)return;if(H!==U.TOUCH_PAN)return;y(e);break;default:H=U.NONE}}function C(e){N.enabled!==!1&&(_(e),N.dispatchEvent(A),H=U.NONE)}function k(e){e.preventDefault()}this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new THREE.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-(1/0),this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return z.phi},this.getAzimuthalAngle=function(){return z.theta},this.reset=function(){N.target.copy(N.target0),N.object.position.copy(N.position0),N.object.zoom=N.zoom0,N.object.updateProjectionMatrix(),N.dispatchEvent(O),N.update(),H=U.NONE},this.update=function(){var t=new THREE.Vector3,o=(new THREE.Quaternion).setFromUnitVectors(e.up,new THREE.Vector3(0,1,0)),r=o.clone().inverse(),a=new THREE.Vector3,s=new THREE.Quaternion;return function(){var e=N.object.position;return t.copy(e).sub(N.target),t.applyQuaternion(o),z.setFromVector3(t),N.autoRotate&&H===U.NONE&&i(n()),z.theta+=G.theta,z.phi+=G.phi,z.theta=Math.max(N.minAzimuthAngle,Math.min(N.maxAzimuthAngle,z.theta)),z.phi=Math.max(N.minPolarAngle,Math.min(N.maxPolarAngle,z.phi)),z.makeSafe(),z.radius*=F,z.radius=Math.max(N.minDistance,Math.min(N.maxDistance,z.radius)),N.target.add(j),t.setFromSpherical(z),t.applyQuaternion(r),e.copy(N.target).add(t),N.object.lookAt(N.target),N.enableDamping===!0?(G.theta*=1-N.dampingFactor,G.phi*=1-N.dampingFactor):G.set(0,0,0),F=1,j.set(0,0,0),!!(B||a.distanceToSquared(N.object.position)>V||8*(1-s.dot(N.object.quaternion))>V)&&(N.dispatchEvent(O),a.copy(N.object.position),s.copy(N.object.quaternion),B=!1,!0)}}(),this.dispose=function(){N.domElement.removeEventListener("contextmenu",k,!1),N.domElement.removeEventListener("mousedown",T,!1),N.domElement.removeEventListener("wheel",S,!1),N.domElement.removeEventListener("touchstart",R,!1),N.domElement.removeEventListener("touchend",C,!1),N.domElement.removeEventListener("touchmove",D,!1),document.removeEventListener("mousemove",L,!1),document.removeEventListener("mouseup",w,!1),window.removeEventListener("keydown",P,!1)};var N=this,O={type:"change"},I={type:"start"},A={type:"end"},U={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},H=U.NONE,V=1e-6,z=new THREE.Spherical,G=new THREE.Spherical,F=1,j=new THREE.Vector3,B=!1,X=new THREE.Vector2,Y=new THREE.Vector2,W=new THREE.Vector2,Z=new THREE.Vector2,q=new THREE.Vector2,K=new THREE.Vector2,J=new THREE.Vector2,Q=new THREE.Vector2,$=new THREE.Vector2,ee=function(){var e=new THREE.Vector3;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),j.add(e)}}(),te=function(){var e=new THREE.Vector3;return function(t,n){e.setFromMatrixColumn(n,1),e.multiplyScalar(t),j.add(e)}}(),ne=function(){var e=new THREE.Vector3;return function(t,n){var o=N.domElement===document?N.domElement.body:N.domElement;if(N.object instanceof THREE.PerspectiveCamera){var i=N.object.position;e.copy(i).sub(N.target);var r=e.length();r*=Math.tan(N.object.fov/2*Math.PI/180),ee(2*t*r/o.clientHeight,N.object.matrix),te(2*n*r/o.clientHeight,N.object.matrix)}else N.object instanceof THREE.OrthographicCamera?(ee(t*(N.object.right-N.object.left)/N.object.zoom/o.clientWidth,N.object.matrix),te(n*(N.object.top-N.object.bottom)/N.object.zoom/o.clientHeight,N.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),N.enablePan=!1)}}();N.domElement.addEventListener("contextmenu",k,!1),N.domElement.addEventListener("mousedown",T,!1),N.domElement.addEventListener("wheel",S,!1),N.domElement.addEventListener("touchstart",R,!1),N.domElement.addEventListener("touchend",C,!1),N.domElement.addEventListener("touchmove",D,!1),window.addEventListener("keydown",P,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}})},function(e,t){"use strict";THREE.PointerLockControls=function(e,t){var n=this;n.domElement=void 0!==t?t:document,e.rotation.set(0,0,0);var o=new THREE.Object3D;o.add(e);var i=new THREE.Object3D;i.position.y=10,i.add(o);var r=Math.PI/2,a=function(e){if(n.enabled!==!1){var t=0,a=0;(n.mouseLastPos.x||n.mouseLastPos.y)&&(t=e.clientX-n.mouseLastPos.x,a=e.clientY-n.mouseLastPos.y,n.mouseLastPos.x=e.clientX,n.mouseLastPos.y=e.clientY);var s=e.movementX||e.mozMovementX||e.webkitMovementX||t,c=e.movementY||e.mozMovementY||e.webkitMovementY||a;i.rotation.y-=.002*s,o.rotation.x-=.002*c,o.rotation.x=Math.max(-r,Math.min(r,o.rotation.x))}};this.dispose=function(){document.removeEventListener("mousemove",a,!1)},document.addEventListener("mousemove",a,!1),this.enabled=!1,this.touchId=null,this.touchLastPos={x:null,y:null},this.mouseLastPos={x:null,y:null},this.getObject=function(){return i},this.getDirection=function(){var e=new THREE.Vector3(0,0,-1),t=new THREE.Euler(0,0,0,"YXZ");return function(n){return t.set(o.rotation.x,i.rotation.y,0),n.copy(e).applyEuler(t),n}}()}},function(e,t,n){var o,i;!function(t){"use strict";var n=function(e,t){function n(t){return e.indexOf(t)!==-1}function o(e){var t;return t=new RegExp(e,"i"),c.className.match(t)}function i(e){o(e)||(c.className+=" "+e)}function r(e){o(e)&&(c.className=c.className.replace(e,""))}function a(t){var n=e.match(t);return n&&n.length>1&&n[1]||""}var s={},c=t||window.document.documentElement;e=(e||window.navigator.userAgent).toLowerCase(),s.ios=function(){return s.iphone()||s.ipod()||s.ipad()},s.iphone=function(){return n("iphone")},s.ipod=function(){return n("ipod")},s.ipad=function(){return n("ipad")},s.android=function(){return n("android")},s.androidPhone=function(){return s.android()&&n("mobile")},s.androidTablet=function(){return s.android()&&!n("mobile")},s.blackberry=function(){return n("blackberry")||n("bb10")||n("rim")},s.blackberryPhone=function(){return s.blackberry()&&!n("tablet")},s.blackberryTablet=function(){return s.blackberry()&&n("tablet")},s.windows=function(){return n("windows")},s.windowsPhone=function(){return s.windows()&&n("phone")},s.windowsTablet=function(){return s.windows()&&n("touch")&&!s.windowsPhone()},s.fxos=function(){return(n("(mobile;")||n("(tablet;"))&&n("; rv:")},s.fxosPhone=function(){return s.fxos()&&n("mobile")},s.fxosTablet=function(){return s.fxos()&&n("tablet")},s.meego=function(){return n("meego")},s.cordova=function(){return window.cordova&&"file:"===location.protocol},s.nodeWebkit=function(){return"object"==typeof window.process},s.bada=function(){return n("bada")},s.mobile=function(){return s.androidPhone()||s.iphone()||s.ipod()||s.windowsPhone()||s.blackberryPhone()||s.fxosPhone()||s.meego()},s.tablet=function(){return s.ipad()||s.androidTablet()||s.blackberryTablet()||s.windowsTablet()||s.fxosTablet()},s.desktop=function(){return!s.tablet()&&!s.mobile()},s.portrait=function(){return window.innerHeight/window.innerWidth>1},s.landscape=function(){return window.innerHeight/window.innerWidth<1},s.standAlone=function(){return window.navigator.standalone===!0},s.addClasses=function(){s._hasAddClasses||(s._hasAddClasses=!0,s.ios()?s.ipad()?i("ios ipad tablet"):s.iphone()?i("ios iphone mobile"):s.ipod()&&i("ios ipod mobile"):i(s.android()?s.androidTablet()?"android tablet":"android mobile":s.blackberry()?s.blackberryTablet()?"blackberry tablet":"blackberry mobile":s.windows()?s.windowsTablet()?"windows tablet":s.windowsPhone()?"windows mobile":"desktop":s.fxos()?s.fxosTablet()?"fxos tablet":"fxos mobile":s.meego()?"meego mobile":s.nodeWebkit()?"node-webkit":"desktop"),s.cordova()&&i("cordova"),s.standAlone()&&i("standalone"))};var l="";return s.ios()?(l=a(/os (\d+([_\s]\d+)*) like mac os x/i),l=l.replace(/[_\s]/g,".")):s.android()?l=a(/android[ \/-](\d+(\.\d+)*)/i):s.windowsPhone()?l=a(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):s.blackberry()?l=a(/rim\stablet\sos\s(\d+(\.\d+)*)/i):s.bada()&&(l=a(/bada\/(\d+(\.\d+)*)/i)),l&&(s.osversion=l),s.addOrientationClasses=function(){if(!s.hasOrientationListener){s.hasOrientationListener=!0;var e=function(){return s.landscape()?(r("portrait"),i("landscape")):(r("landscape"),i("portrait"))},t="onorientationchange"in window?"orientationchange":"resize";window.addEventListener?window.addEventListener(t,e,!1):window.attachEvent?window.attachEvent(t,e):window[t]=e,e()}},s};"undefined"!=typeof e&&e.exports?e.exports=n:(o=[],i=function(){return n}.apply(t,o),!(void 0!==i&&(e.exports=i)))}(this)},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(3),s=o(a),c=n(22),l=o(c),d=new Event("startQuest"),f=new Event("toogleDoors"),u=function(){function e(t){i(this,e),s.default.isDebug&&(this.statsUi=new l.default(t));var n=document.createElement("button");n.style.position="absolute",n.style.width="200px",n.style.height="60px",n.innerHTML="Start Quest",n.addEventListener("click",function(){document.dispatchEvent(d)}),document.body.appendChild(n);var o=document.createElement("button");o.style.position="absolute",o.style.left="200px",o.style.width="200px",o.style.height="60px",o.innerHTML="Toogle Doors",o.addEventListener("click",function(){document.dispatchEvent(f)}),document.body.appendChild(o),document.addEventListener("keydown",function(e){49===e.keyCode&&document.dispatchEvent(f)});var r=document.createElement("div");r.style.position="absolute",r.style.top="60px",r.style.backgroundColor="rgba(255, 255, 255, 0.7)",r.style.width="400px",r.style.height="50px",r.innerHTML="Press 1 on keyboard to toogle doors",document.body.appendChild(r)}return r(e,[{key:"update",value:function(){this.statsUi&&this.statsUi.update()}}]),e}();t.default=u},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(23),a=[["drawcalls","render","calls",0],["programs","programs","length",0],["geometries","memory","geometries",0],["textures","memory","textures",0],["faces","render","faces",0]],s=null,c=null,l=function(){function e(t){o(this,e),this.rInfo=t.info,this.stats=new r;var n=this.createRenderInfoDiv(),i=this.createRenderInfoTableDiv();n.appendChild(i),this.stats.domElement.appendChild(n),document.body.appendChild(this.stats.domElement)}return i(e,[{key:"update",value:function(){this.updateRenderInfo(),this.stats.update()}},{key:"updateRenderInfo",value:function(){for(s=0;s<a.length;s++)c=this.rInfo[a[s][1]][a[s][2]],c!==a[s][3]&&(a[s][3]=c,a[s][4].nodeValue=c)}},{key:"createRenderInfoDiv",value:function(){var e=document.createElement("div");return e.id="render-info",e.style.width="80px",e.style.backgroundColor="rgb(0, 0, 34)",e.style.color="rgb(0, 255, 255)",e.style.fontSize="11px",e.style.fontFamily="Helvetica, Arial, sans-serif",e}},{key:"createRenderInfoTableDiv",value:function(){var e=document.createElement("TABLE"),t=document.createElement("TBODY");e.appendChild(t);var n=void 0,o=void 0,i=void 0;for(s=0;s<a.length;s++)n=document.createElement("TR"),t.appendChild(n),o=document.createElement("TD"),o.width=35,o.style.maxWidth="35px",o.appendChild(document.createTextNode(a[s][0])),n.appendChild(o),o=document.createElement("TD"),o.width=35,o.style.textAlign="right",o.style.float="right",i=document.createTextNode(a[s][3]),a[s].push(i),o.appendChild(i),n.appendChild(o);return e}}]),e}();t.default=l},function(e,t,n){var o=function(){var e=Date.now(),t=e,n=0,o=1/0,i=0,r=0,a=1/0,s=0,c=0,l=0,d=document.createElement("div");d.id="stats",d.addEventListener("mousedown",function(e){e.preventDefault(),E(++l%2)},!1),d.style.cssText="width:80px;opacity:0.9;cursor:pointer";var f=document.createElement("div");f.id="fps",f.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002",d.appendChild(f);var u=document.createElement("div");u.id="fpsText",u.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px",u.innerHTML="FPS",f.appendChild(u);var h=document.createElement("div");for(h.id="fpsGraph",h.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff",f.appendChild(h);h.children.length<74;){var m=document.createElement("span");m.style.cssText="width:1px;height:30px;float:left;background-color:#113",h.appendChild(m)}var p=document.createElement("div");p.id="ms",p.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none",d.appendChild(p);var v=document.createElement("div");v.id="msText",v.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px",v.innerHTML="MS",p.appendChild(v);var g=document.createElement("div");for(g.id="msGraph",g.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0",p.appendChild(g);g.children.length<74;){var m=document.createElement("span");m.style.cssText="width:1px;height:30px;float:left;background-color:#131",g.appendChild(m)}var E=function(e){switch(l=e){case 0:f.style.display="block",p.style.display="none";break;case 1:f.style.display="none",p.style.display="block"}},b=function(e,t){var n=e.appendChild(e.firstChild);n.style.height=t+"px"};return{REVISION:12,domElement:d,setMode:E,begin:function(){e=Date.now()},end:function(){var l=Date.now();return n=l-e,o=Math.min(o,n),i=Math.max(i,n),v.textContent=n+" MS ("+o+"-"+i+")",b(g,Math.min(30,30-n/200*30)),c++,l>t+1e3&&(r=Math.round(1e3*c/(l-t)),a=Math.min(a,r),s=Math.max(s,r),u.textContent=r+" FPS ("+a+"-"+s+")",b(h,Math.min(30,30-r/100*30)),t=l,c=0),l},update:function(){e=this.end()}}};e.exports=o},function(e,t){"use strict";e.exports=function(){if(window.WebGLRenderingContext){for(var e=document.createElement("canvas"),t=["webgl","experimental-webgl","moz-webgl"],n=!1,o=0;o<t.length;o++)try{if(n=e.getContext(t[o]),n&&"function"==typeof n.getParameter)return!0}catch(e){console.log("Unable to initialize WebGL. Your browser may not support it.")}return!1}return!1}}]);